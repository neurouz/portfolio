var source_code = "#include <iostream>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nenum Mrezna_Klasa { A, B, C };\nconst char* MreznaKlasaChar[] = { \"Class A - Big network\\n\", \"Class B - Medium network\\n\", \"Class C - Small network\\n\" };\n\n#define crt {cout<<\"----------------------------------------------------------------------------------------\\n\";}\n\nauto crta = \"\\n---------------------------------\\n\";\n\nint DecimalToBinary(int broj) {\n\tint novi = 0;\n\tint stepen = 0;\n\twhile (broj) {\n\t\tint ostatak = broj % 2;\n\t\tnovi += ostatak * pow(10, stepen);\n\t\tbroj /= 2;\n\t\tstepen++;\n\t}\n\treturn novi;\n}\nint BrojCifara(int broj) {\n\tint cif = 0;\n\twhile (broj) {\n\t\tcif++;\n\t\tbroj /= 10;\n\t}\n\treturn cif;\n}\nint BinaryToDecimal(int broj) {\n\tint brCif = BrojCifara(broj);\n\tint stepen = 0;\n\tint Decimalno = 0;\n\twhile (broj) {\n\t\tint cifra = broj % 10;\n\t\tif (cifra == 1)\n\t\t\tDecimalno += cifra * pow(2, stepen);\n\t\tbroj /= 10;\n\t\tstepen++;\n\t}\n\treturn Decimalno;\n}\nstring Get8Digit(int broj) {\n\tstring novi = \"00000000\";\n\tint indeks = 7;\n\twhile (broj) {\n\t\tconst int cifra = broj % 10;\n\t\tnovi[indeks] = cifra + '0';\n\t\tindeks--;\n\t\tbroj /= 10;\n\t}\n\treturn novi;\n}\nstring GetAdresuMreze(string ip, string subnet) {\n\n\tif (ip.c_str() == nullptr)\n\t\tthrow exception();\n\n\tstring temp;\n\tfor (size_t i = 0; i < ip.length(); i++)\n\t{\n\t\tif (ip[i] == '.') temp += ip[i];\n\t\telse if (ip[i] == '1' && subnet[i] == '1') temp += '1';\n\t\telse temp += '0';\n\t}\n\treturn temp;\n}\nstring GetPrvuIskoristivu(string mreza) {\n\n\tif (mreza.c_str() == nullptr)\n\t\tthrow exception();\n\n\tstring PosljednjiOktet = mreza.substr(27, 35);\n\tint broj = stoi(PosljednjiOktet);\n\tint noviBroj = BinaryToDecimal(broj);\n\tnoviBroj++;\n\tbroj = DecimalToBinary(noviBroj);\n\tstring cat = Get8Digit(broj);\n\n\tstring novi = mreza.substr(0, 27);\n\tnovi += cat;\n\t\n\treturn novi;\n}\nstring GetBroadcastAdresu(int subnet, string mreza) {\n\n\tif (mreza.c_str() == nullptr)\n\t\tthrow exception();\n\n\tstring temp;\n\tfor (size_t i = 0; i < subnet; i++)\n\t{\n\t\tif (mreza[i] == '.') { subnet++; temp += mreza[i]; }\n\t\telse temp += mreza[i];\n\t}\n\tfor (size_t i = subnet; i < mreza.length(); i++)\n\t{\n\t\tif (mreza[i] == '.') temp += '.';\n\t\telse temp += '1';\n\t}\n\n\treturn temp;\n}\nstring GetZadnjuIskoristivu(string broadcast) {\n\n\tif (broadcast.c_str() == nullptr)\n\t\tthrow exception();\n\n\tstring PosljednjiOktet = broadcast.substr(27, 35);\n\tint broj = stoi(PosljednjiOktet);\n\tint noviBroj = BinaryToDecimal(broj);\n\tnoviBroj--;\n\tbroj = DecimalToBinary(noviBroj);\n\tstring cat = Get8Digit(broj);\n\n\tstring novi = broadcast.substr(0, 27);\n\tnovi += cat;\n\n\treturn novi;\n}\n\nstring GetAdresuDecimalno(string binarna) {\n\n\tif (binarna.c_str() == nullptr)\n\t\tthrow exception();\n\n\tint Okteti[4] = { 0,0,0,0 };\n\tint stepen = 0;\n\tint brojacOkteta = 3;\n\tfor (size_t i = binarna.length() - 1; i != -1; i--)\n\t{\n\t\tif (binarna[i] != '.') {\n\t\t\tchar znak = binarna[i];\n\t\t\tint cifra = atoi(&znak);\n\t\t\tOkteti[brojacOkteta] += cifra * pow(10, stepen);\n\t\t\tstepen++;\n\t\t}\n\t\tif (binarna[i] == '.') {\n\t\t\tbrojacOkteta--;\n\t\t\tstepen = 0;\n\t\t}\n\t}\n\n\tint n1 = BinaryToDecimal(Okteti[0]);\n\tint n2 = BinaryToDecimal(Okteti[1]);\n\tint n3 = BinaryToDecimal(Okteti[2]);\n\tint n4 = BinaryToDecimal(Okteti[3]);\n\n\tstring t1 = to_string(n1);\n\tstring t2 = to_string(n2);\n\tstring t3 = to_string(n3);\n\tstring t4 = to_string(n4);\n\n\tstring temp = t1;\n\ttemp += \".\" + t2 + \".\" + t3 + \".\" + t4;\n\n\treturn temp;\n}\n\nclass SubnetMask\n{\npublic:\n\tSubnetMask(int sn) : subnet(sn) {\n\t\tif (sn <= 8) klasa = A;\n\t\tif (sn > 8 && sn <= 16) klasa = B;\n\t\tif (sn > 16) klasa = C;\n\t}\n\n\tstatic bool IsValid(int subnet)\n\t{\n\t\treturn subnet > 7 && subnet < 32;\n\t}\n\n\t~SubnetMask() {\n\t\tsubnet = 0;\n\t}\n\n\tvoid LoadSubnetMask() {\n\t\tstring temp = \"00000000.00000000.00000000.00000000\";\n\t\tint kopija = subnet;\n\t\tfor (size_t i = 0; i < kopija; i++)\n\t\t{\n\t\t\tif (temp[i] == '.') kopija++;\n\t\t\telse temp[i] = '1';\n\t\t}\n\t\t_subnetMask = temp;\n\t}\n\tvoid PrintSubnetMask() const {\n\t\tcout << \"\\nSubnet:\\t\\t\\t\\t/\" << subnet << endl;\n\t\tcout << \"Subnet mask:\\t\\t\\t\" << _subnetMask;\n\t\tcout << \"  |  \" << GetAdresuDecimalno(_subnetMask) << endl;\n\t}\n\tstring GetSubnetBinary() const {\n\t\treturn _subnetMask;\n\t}\n\tint GetSubnetDecimal() const {\n\t\treturn subnet;\n\t}\n\tMrezna_Klasa GetKlasu() const {\n\t\treturn klasa;\n\t}\n\nprivate:\n\tstring _subnetMask;\n\tMrezna_Klasa klasa;\n\tint subnet;\n};\n\nclass IP_Adress\n{\npublic:\n\tvoid Add_IP(string IP) {\n\t\tif (CheckValid(IP)) {\n\t\t\t_ip = IP;\n\t\t}\n\t\telse\n\t\t\t_valid = false;\n\t}\n\tstatic bool CheckValid(string ip) {\n\t\tif (ip.length() > 15)\n\t\t\treturn false;\n\n\t\tbool check = true; int brCif = 0;\n\n\t\tfor (size_t i = 0; i < ip.length(); i++)\n\t\t{\n\t\t\tif (ip[i] == '-') return false;\n\t\t}\n\t\tfor (size_t i = 0; i < ip.length(); i++)\n\t\t{\n\t\t\tif (ip[i] == '.') {\n\t\t\t\tif (brCif > 3) return false;\n\t\t\t\tbrCif = 0;\n\t\t\t}\n\t\t\telse brCif++;\n\t\t}\n\n\t\tint Okteti[4] = { 0,0,0,0 };\n\t\tint stepen = 0;\n\t\tint brojacOkteta = 3;\n\t\tfor (size_t i = ip.length() - 1; i != -1; i--)\n\t\t{\n\t\t\tif (ip[i] != '.') {\n\t\t\t\tchar znak = ip[i];\n\t\t\t\tint cifra = atoi(&znak);\n\t\t\t\tOkteti[brojacOkteta] += cifra * pow(10, stepen);\n\t\t\t\tstepen++;\n\t\t\t}\n\t\t\tif (ip[i] == '.') {\n\t\t\t\tbrojacOkteta--;\n\t\t\t\tstepen = 0;\n\t\t\t}\n\t\t}\n\n\t\tfor (size_t i = 0; i < 4; i++)\n\t\t{\n\t\t\tif (Okteti[i] < 0 || Okteti[i] > 255) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\tvoid convert_to_binary() {\n\n\t\tif (_ip.c_str() == nullptr) return;\n\n\t\tint Okteti[4] = { 0,0,0,0 };\n\t\tint stepen = 0;\n\t\tint brojacOkteta = 3;\n\t\tfor (size_t i = _ip.length() - 1; i != -1; i--)\n\t\t{\n\t\t\tif (_ip[i] != '.') {\n\t\t\t\tchar znak = _ip[i];\n\t\t\t\tint cifra = atoi(&znak);\n\t\t\t\tOkteti[brojacOkteta] += cifra * pow(10, stepen);\n\t\t\t\tstepen++;\n\t\t\t}\n\t\t\tif (_ip[i] == '.') {\n\t\t\t\tbrojacOkteta--;\n\t\t\t\tstepen = 0;\n\t\t\t}\n\t\t}\n\t\tchar t1[8], t2[8], t3[8], t4[8];\n\n\t\tint n1 = DecimalToBinary(Okteti[0]);\n\t\tint n2 = DecimalToBinary(Okteti[1]);\n\t\tint n3 = DecimalToBinary(Okteti[2]);\n\t\tint n4 = DecimalToBinary(Okteti[3]);\n\n\t\tstring temp = Get8Digit(n1);\n\t\ttemp += \".\" + Get8Digit(n2) + \".\" + Get8Digit(n3) + \".\" + Get8Digit(n4);\n\n\t\t_ip_binary = temp;\n\t}\n\tvoid PrintIP() const {\n\t\tif (_ip.c_str() != nullptr) {\n\t\t\tcrt;\n\t\t\tcout << \"IP Address (Decimal):\\t\\t\" << _ip << endl;\n\t\t}\n\t\tif (_ip_binary.c_str() != nullptr) {\n\t\t\tcout << \"IP Address (Binary):\\t\\t\" << _ip_binary << endl;\n\t\t}\n\t}\n\tstring GetIPBinary() const {\n\t\treturn _ip_binary;\n\t}\n\tstring GetIPDecimal() const {\n\t\treturn _ip;\n\t}\n\nprivate:\n\tstring _ip;\n\tstring _ip_binary;\n\tbool _valid = true;\n};\n\nint main() {\n\n\tstring ip_address;\n\tgetline(cin, ip_address);\n\t\n\tif(!IP_Adress::CheckValid(ip_address))\n\t{\n\t\tcout << \"> ERROR: IP Address is not valid.\";\n\t\treturn -1;\n\t}\n\n\tint subnet;\n\tcin >> subnet;\n\n\tif(!SubnetMask::IsValid(subnet))\n\t{\n\t\tcout << \"> ERROR: Value of subnet mask must be between 8 and 32.\";\n\t\treturn -1;\n\t}\n\n\tIP_Adress IP1;\n\tIP1.Add_IP(ip_address);\n\tIP1.convert_to_binary();\n\tIP1.PrintIP();\n\n\tSubnetMask mask1(subnet);\n\tmask1.LoadSubnetMask();\n\tmask1.PrintSubnetMask();\n\n\tcrt;\n\tcout << \"\\t\\t\\tNetwork class: \" << MreznaKlasaChar[mask1.GetKlasu()];\n\tcrt;\n\n\ttry {\n\t\tstring Adresa_mreze = GetAdresuMreze(IP1.GetIPBinary(), mask1.GetSubnetBinary());\n\t\tcout << \"\\nNetwork address:\\t\\t\" << Adresa_mreze;\n\t\tcout << \"  |  \" << GetAdresuDecimalno(Adresa_mreze) << endl;\n\t\tstring Prva_iskoristiva = GetPrvuIskoristivu(Adresa_mreze);\n\t\tcout << \"First available address:\\t\" << Prva_iskoristiva;\n\t\tcout << \"  |  \" << GetAdresuDecimalno(Prva_iskoristiva) << endl;\n\t\tstring Broadcast_adresa = GetBroadcastAdresu(mask1.GetSubnetDecimal(), IP1.GetIPBinary());\n\t\tcout << \"Broadcast address:\\t\\t\" << Broadcast_adresa;\n\t\tcout << \"  |  \" << GetAdresuDecimalno(Broadcast_adresa) << endl;\n\t\tstring Zadnja_iskoristiva = GetZadnjuIskoristivu(Broadcast_adresa);\n\t\tcout << \"Last available address:\\t\\t\" << Zadnja_iskoristiva;\n\t\tcout << \"  |  \" << GetAdresuDecimalno(Zadnja_iskoristiva) << endl;\n\n\t\tconst int stepen = 32 - mask1.GetSubnetDecimal();\n\t\tconst int host = pow(2, stepen) - 2;\n\t\tcout << \"Total number of hosts:\\t\\t\" << host << endl;\n\t\tcrt;\n\t}\n\tcatch (const exception& e) { cout << \"Exception error :: \" << e.what(); }\n\n\tcin.get();\n\treturn 0;\n}";